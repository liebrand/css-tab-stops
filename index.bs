<h1>CSS Tab Stops support</h1>

<pre class='metadata'>
Shortname: css-tab-stops
Level: 1
Status: ED
Group: csswg
TR: http://www.w3.org/TR/css-tab-stops/
ED: http://dev.w3.org/csswg/css-tab-stops/
Editor: Jelte Liebrand, Google, http://example.com/contact
Abstract: This module introduces the 'css-tab-stops' property and related values, which extend CSS Text Module (Level 3) white-space processing to provide a better representation of word processor like documents.
Ignored Terms: div, dl, dfn
</pre>

<style type="text/css">
/* delete this block when you've cleared out all the .replaceme elements */
.replaceme {
  border: solid red;
  padding: 0 0.5em;
  margin: 0 0.1em;
  background: yellow;
  color: green;
}
.replaceme:before {
  content: "FIXME(";
  color: black;
}
.replaceme:after {
  content: ")";
  color: black;
}
</style>

<h2 id="intro">
Introduction</h2>

  <em>This section is not normative.</em>

  CSS Text Module Level 3 describes the behaviour of the tab-size (LINK) property, which provides document authors the ability to set the default size of a tab. This document introduces new css properties to extend this behaviour to allow for richer document authoring.

  It builds on earlier attempts to define better support for tab stops, such as http://www.w3.org/People/howcome/t/970224HTMLERB-CSS/WD-tabs-970117.html as well as existing specified behaviour such as "leaders" (LINK)

  New properties include 'tab-stops-positions', 'tab-stops-alignments' and 'tab-stops-leaders', all of which can be grouped in the shorthand property: 'tab-stops'


<h2 id="tab-stops-positions">
Tab Stop positions: the 'tab-stops-positions' property</h2>

  The 'tab-size' property allows a document author to specify the default width of a tab (either as an integer (number of white space characters) or a length (absolute position relative to parent block)). The 'tab-stops-positions' property allows the author to specify a comma separated list of _different_ tab-sizes. Any subsequent tabs will be rendered as per the default 'tab-size' property.

  <pre class='propdef'>
    Name: tab-stops-positions
    Value: [ &lt;integer&gt; | &lt;length&gt;, ]* &lt;integer&gt; | &lt;length&gt;
    Initial: (none)
    Applies to: block containers
    Inherited: yes
    Percentages: n/a
    Media: visual
    Computed value: the specified integer or length made absolute
    Animatable: no
    Canonical order: per grammar
  </pre>

  Example:
  <div class='example'>
      <p>
        <pre>
          HTML:
          ...Lorem ipsum(U+0009)dolor sit amet, consectetur(U+0009)adipisicing(U+0009)elit, sed

          CSS:
          p {
            tab-size: 8,
            tab-stops-positions: 4cm, 10cm
          }

          Result:
          0cm               4cm                            10cm       | 8 spaces |
          ...Lorem ipsum    dolor sit amet, consectetur    adipisicing            elit, sed
        </pre>
  </div>

<h2 id="tab-stops-alignments">
Tab Stop alignments: the 'tab-stops-alignments' property</h2>

  lala

<h2 id="tab-stops-leaders">
Tab Stop leaders: the 'tab-stops-leaders' property</h2>

  lala


<h2 id="tab-stops">
Shorthand property: 'tab-stops'</h2>

  Rather than specify each individual position along with alignment and/or leader styling, you can use the following shorthand:

  <pre class='propdef'>
    Name: tab-stops-positions
    Value: [ &lt;tab-stop-definition&gt;, ]* &lt;tab-stop-definition&gt;
    Initial: see individual properties
    Applies to: block containers
    Inherited: yes
    Percentages: n/a
    Media: visual
    Computed value: see individual properties
    Animatable: see individual properties
    Canonical order: per grammar
  </pre>

  Where:<br/>
    <i>
      <b>&lt;tab-stop-definition&gt;</b> =
      [&lt;tab-stop-leader&gt;]? || [&lt;tab-stop-alignment&gt;]? || &lt;tab-stop-position&gt;
    </i>


  <div class="examples">
    <pre>
      p {
        tab-stops: 1cm, 2cm, 3cm, 4cm, 5cm, 6cm, center 10cm, right 11cm, dotted right 15cm
      }
    </pre>
  <div>

<h2 id="tab stop rules">
Tab Stop Rules</h2>

  TODO: CSS Text Module L3 doesn't actually define the behaviour of how tabs are rendered. Add basic tab stop definition and rules here; eg when and how does text "jump" from one tab stop to the next. Specifically include rules for aligned tab stops!



<h2 id="sample-topic">
Sample section</h2>

  Look at the mark-up in this section for examples.
  See the <a href="https://www.w3.org/Style/Group/css3-src/bin/README">documentation</a> for more precise instructions.
  The companion of this template shows the <a href="Overview.html">processed result</a>.

  To refer to HTML, use [[HTML40]] (note the double square brackets).
  To make a normative reference,
  insert a &ldquo;!&rdquo;, like this:
  [[!CSS3SYN]]
  The currently available <a href="https://www.w3.org/Style/Group/css3-src/biblio.ref">list of bibliographic data</a> can of course be extended.

  We write about a property such as 'foo' like this
  and about a piece of CSS code like this: ''foo: bar''.
  (Note that if it looks like a "property: value",
  it'll automatically link to the property.)
  Inline HTML and XML are similar,
  but use the CODE element: <code class=html>&lt;blockquote&gt;...&lt;/blockquote&gt;</code>
  and <code class=xml>&lt;r:xyz&gt;...&lt;/r:xyz&gt;</code>.

  Note: Note that the property will automatically be linked to its definition.

  To define <dfn>terms</dfn> into the <dfn>index</dfn>,
  there are many <dfn title="variant">variants</dfn>,
  but hopefully the <dfn title="simple|simpler|simplest">simplest</dfn>
  will be the most common.

  Note: Note that you can add non-normative notes like this.

  Of course, multi-paragraph notes are also possible: just enclose them in a <a element>div</a>:

  <div class=note>
    Note that this note is a multi-paragraph note.

    It doesn't <em>need</em> to have two paragraphs, but it could.
  </div>

  Displayed examples come in eight different types:
  CSS examples that need no separate paragraph of explanation are put in a simple PRE:

  <pre class=example>
    EM { font-style: italic }
  </pre>

  CSS examples that need extra text need a DIV.

  <div class=example>
    The following example is the same as the previous one,
    but now it is explained:

    <pre>EM { font-style: italic }</pre>
  </div>

  Illegal CSS examples (examples of errors) are the same,
  but with class "illegal example".
  Examples of HTML and XML code have class "html" and "xml"respectively,
  but are otherwise ditto.

  A formal definition of a property looks like this:

<h3 id="the-display-model">
Internal display model: the 'display-inside' property</h3>

  <pre class='propdef'>
    Name: foo
    Value: inline-inside | block-inside | table | ruby | icon
    Initial: text
    Applies to: all elements
    Inherited: no
    Percentages: n/a
    Media: visual
    Computed value: specified value
    Animatable: no
    Canonical order: per grammar
  </pre>

  <dl dfn-type="value" dfn-for="foo">
    <dt><dfn>value-name</dfn>
    <dd>
      Define values using a <a element>dl</a>.
      Note that the <a element>dl</a> wrapper
      specifies the default <a element>dfn</a> type and what property it's for,
      so you don't have to repeat that information in each individual definition.
  </dl>

  <dfn>Cross-references</dfn> are created by enclosing a term or phrase in &lt;dfn>
  (like the word <a>cross-references</a> earlier in this sentence).
  Then an &lt;a> without an <code>href=''</code> attribute
  with the same text content will automatically be linked.
  Both &lt;dfn>s and &lt;a>s are typed,
  which allows the same text to appear as different types of terms without a collision.
  The type can often be inferred,
  but sometimes it needs to be specified,
  like when you're linking to a <a interface>Foo</a> WebIDL interface.

  And a figure with a caption is done like this:

  <figure>
    <img src="corner.png" alt="A table with a caption above it; both have margins and the margins between them are collapsed, as is normal for vertical margins.">

    <figcaption>
      Just a random image.
      Use SVG if you can.
      Otherwise, W3C prefers PNG over GIF (obviously, since PNG is a W3C Rec).
    </figcaption>
  </figure>

  Don't forget to write the alt.

  <p class='issue'>
    An open issue or editorial remark is OK in a WD,
    but they should be resolved/removed before the document goes to &ldquo;CR&rdquo;
    (Candidate Recommendation).
    Use class=&ldquo;issue&rdquo;.

  <p class='issue'>
    Inline issues will be copied into an <a href="#issues-index">Issues Index</a> at the end of the document,
    for easy reference.

  <pre class='idl'>
    /* Write WebIDL in a &lt;pre class="idl"> as plain text. */
    interface Foo {
      readonly attribute DOMString bar;
      boolean baz(FooDict Arg1, (DOMString or Foo) Arg2);
    };

    dictionary FooDict {
      sequence&lt;Foo> foo;
      boolean bar;
      DOMString baz = "qux";
    };
  </pre>